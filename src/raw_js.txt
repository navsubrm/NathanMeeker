//External Import:
import emailValidator from "https://cdn.skypack.dev/email-validator";
import dompurify from "https://cdn.skypack.dev/dompurify";
import emailjsCom from "https://cdn.skypack.dev/emailjs-com";

//DOM Elements:
const homeBtn = document.querySelectorAll(".home-btn");
const cardContainer = document.querySelector("#card-container");
//Experience Container Items:
const experienceBtn = document.querySelectorAll(".experience-btn");
const experience = document.querySelector(".experience");
const experienceCard = document.querySelector("#experience-card");
//About Container Items:
const aboutBtn = document.querySelectorAll(".about-btn");
const about = document.querySelector(".about-me");
const aboutCard = document.querySelector("#about-card");
//Contact Container Items:
const contactBtn = document.querySelectorAll(".contact-btn");
const contact = document.querySelector(".contact-me");
const contactCard = document.querySelector("#contact-card");

//Extra Container Items:
const extra = document.querySelector(".extra");

const adjustText = () => {
  const sideA = cardContainer.clientHeight; //Height
  const sideB = cardContainer.clientWidth; //Width
  const angle = Math.atan2(sideA, sideB); //tangent of a/b gives angle in radians
  document.documentElement.style.setProperty("--top-calc", `${650}%`);
  if (cardContainer.classList.contains("card-container")) {
    document.documentElement.style.setProperty("--sub-container-diagonal", `-${angle}rad`);
  } else {
    document.documentElement.style.setProperty("--sub-container-diagonal", `0rad`);
  }
};

const loadState = () => {
  cardContainer.classList.add("card-container");
  experience.classList.remove("card-visible");
  contact.classList.remove("card-visible");
  about.classList.remove("card-visible");
  experience.classList.remove("hidden");
  about.classList.remove("hidden");
  contact.classList.remove("hidden");
  extra.classList.remove("hidden");
  experienceCard.classList.add("hidden");
  aboutCard.classList.add("hidden");
  contactCard.classList.add("hidden");
  adjustText();
};

const viewExperience = () => {
  loadState();
  experience.classList.remove("card-close");
  cardContainer.classList.toggle("card-container");
  experience.classList.toggle("card-visible");
  about.classList.toggle("hidden");
  contact.classList.toggle("hidden");
  extra.classList.toggle("hidden");
  experienceCard.classList.toggle("hidden");
  adjustText();
};

const viewAbout = () => {
  loadState();
  cardContainer.classList.toggle("card-container");
  about.classList.toggle("card-visible");
  experience.classList.toggle("hidden");
  contact.classList.toggle("hidden");
  extra.classList.toggle("hidden");
  aboutCard.classList.toggle("hidden");
  adjustText();
};

const viewContact = () => {
  loadState();
  cardContainer.classList.toggle("card-container");
  contact.classList.toggle("card-visible");
  experience.classList.toggle("hidden");
  about.classList.toggle("hidden");
  extra.classList.toggle("hidden");
  contactCard.classList.toggle("hidden");
  adjustText();
};

//Event Listeners:
window.addEventListener("load", (e) => adjustText(e));
window.addEventListener("resize", (e) => adjustText(e));
window.addEventListener("resize", (e) => {
  const cardVisible = document.querySelector(".card-visible");
  let startValue = cardVisible.clientHeight; //Height
  document.documentElement.style.setProperty("--visible-sub-pos", `${startValue / 2}px`);
  document.documentElement.style.setProperty("--visible-sub-height", `${startValue / 2}px`);
});

//Event Listeners with loops to add listener to each activation location:
experienceBtn.forEach((cur) => {
  cur.addEventListener("click", () => {
    if (experience.classList.contains("card-visible")) return loadState();
    viewExperience();
  });
});
aboutBtn.forEach((cur) => {
  cur.addEventListener("click", () => {
    if (about.classList.contains("card-visible")) return loadState();
    viewAbout();
  });
});
contactBtn.forEach((cur) => {
  cur.addEventListener("click", (e) => {
    if (e.target.nodeName === "FORM" || e.target.parentElement.nodeName === "FORM") return;
    if (contact.classList.contains("card-visible")) return loadState();
    viewContact();
  });
});
homeBtn.forEach((cur) => {
  cur.addEventListener("click", () => {
    loadState();
  });
});

//Handle contact form:
emailjsCom.init("user_RoDNRpp8DGk61m380dPFq");
//DOM elements for contact form:
const fName = document.querySelector("#first-name");
const lName = document.querySelector("#last-name");
const email = document.querySelector("#email");
const message = document.querySelector("#message");
const contactSubmit = document.querySelector("#contact-form");

//Error Elements:
const fNameBlank = document.querySelector("#fName-alert");
const lNameBlank = document.querySelector("#lName-alert");
const emailBlank = document.querySelector("#email-blank");
const emailFormat = document.querySelector("#email-format");
const messageBlank = document.querySelector("#message-alert");
const messageSuccess = document.querySelector("#message-success");
const messageFail = document.querySelector("#message-fail");

//Form variables:
let alertTimer;

const validateEmail = () => {
  if (email.value === null || email.value === "") return;
  if (!emailValidator.validate(email.value)) return emailFormat.classList.add("alert-warn");
  emailFormat.classList.remove("alert-warn");
};

const validateBlankField = (e) => {
  const actionItem = document.querySelector(`#${e.target.getAttribute("id")}`);
  if (actionItem.value === null || actionItem.value === "") {
    actionItem.value = "This field cannot be left blank.";
    return actionItem.classList.add("alert-warn");
  }
};

const clearInvalidation = (e) => {
  console.log(e.target.value);
  if (!e.target.value.includes("This field")) return;
  const actionItem = document.querySelector(`#${e.target.getAttribute("id")}`);
  actionItem.value = null;
  actionItem.classList.remove("alert-warn");
};

const keyEventValidator = (callback) => {
  clearTimeout(alertTimer);
  alertTimer = setTimeout(() => callback(), 1500);
};

const inputValidator = (input) => {
  let sanitizedInput = dompurify.sanitize(input);
  if (sanitizedInput.includes("This field cannot") || sanitizedInput === "") return true;
};

const validateMessageContents = () => {
  let invalidContents = 0;
  if (inputValidator(fName.value)) invalidContents++;
  if (inputValidator(lName.value)) invalidContents++;
  if (!emailValidator.validate(email.value)) invalidContents++;
  if (inputValidator(message.value)) invalidContents++;
  if (invalidContents === 0) return true;
};

const messageSubmit = (e) => {
  e.preventDefault();
  if (validateMessageContents()) {
    emailjsCom
      .send("service_0wgxmn4", "template_u9mwv2n", {
        from_name: `${fName.value} ${lName.value}`,
        from_email: `${email.value}`,
        message: dompurify.sanitize(message.value),
      })
      .then(
        function (response) {
          //add alert class for success or failure
          messageSuccess.classList.add("alert-success");
          setTimeout(() => messageSuccess.classList.remove("alert-success"), 7000);
        },
        function (err) {
          messageFail.classList.add("alert-fail");
          setTimeout(() => messageFail.classList.remove("alert-fail"), 7000);
        }
      );
  } else {
    messageFail.classList.add("alert-fail");
    setTimeout(() => messageFail.classList.remove("alert-fail"), 7000);
  }
};

//fName handlers:
fName.addEventListener("focus", (e) => clearInvalidation(e));
fName.addEventListener("click", (e) => clearInvalidation(e));
fName.addEventListener("blur", (e) => validateBlankField(e));

//lName handlers:
lName.addEventListener("focus", (e) => clearInvalidation(e));
lName.addEventListener("click", (e) => clearInvalidation(e));
lName.addEventListener("blur", (e) => validateBlankField(e));

//email handlers:
email.addEventListener("focus", (e) => clearInvalidation(e));
email.addEventListener("click", (e) => clearInvalidation(e));
email.addEventListener("blur", (e) => validateBlankField(e));
email.addEventListener("keyup", () => keyEventValidator(validateEmail));

//message handlers:
message.addEventListener("focus", (e) => clearInvalidation(e));
message.addEventListener("click", (e) => clearInvalidation(e));
message.addEventListener("blur", (e) => validateBlankField(e));
contactSubmit.addEventListener("submit", (e) => messageSubmit(e));